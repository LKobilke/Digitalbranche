[["index.html", "R for digital media analysis General information on the course What do you learn from this tutorial? What should you do if you have an urgent question? What can I do if I have problems with my R code?", " R for digital media analysis Lara Kobilke, IfKW, Ludwig-Maximilians-Universität München 2022-05-01 General information on the course This online tutorial will accompany the seminar Digital industry: Current developments and challenges, a B.A. Seminar at the IfKW (Ludwig-Maximilians-Universität München, SS2022). The course takes place in Oettingenstraße 67, Room 151 (Monday 16:15-17.45 am). You can access all necessary information on the seminars syllabus, important dates and assignments via Moodle, SoSe 22 Digitalbranche: Entwicklungen und Herausforderungen. There, additional resources (e.g. Powerpoint slides, helpful book resources) are uploaded to the material folders of the respective week. What do you learn from this tutorial? After completing the entire tutorial, you will have acquired two important skills: Know how to use R and R studio to complete your data management. Know how to use R and R studio to do digital media analysis. In the seminar, our sessions will consist of two parts. In the first part, we will learn about the digital industry and invite guests to join us for discussions. In the second part, you will work through this tutorial and solve exercises together with fellow students. The tutorial is designed to provide the R skills that you need to put the seminars discussions into real-world practice. The goal is to make the individual seminar sessions diverse and to advance your programming skills with as much ease and fun as possible. Each tutorial consists of: an introduction to new functions/analysis methods in R, including corresponding R code main take aways that you should remember information on additional tutorials / sources exercises to practice your new skills (youll often work through these with your peers) What should you do if you have an urgent question? Questions are welcome! Its natural to have a lot of questions because youll be learning a lot of new stuff. Please do ask if you dont understand something in this tutorial, have questions concerning exercises, or simply need to talk through some of the new stuff. Its quite natural to get lost at times when learning a new programming language. Dont worry; its extremely probable that everyone else is experiencing the same thing. Therefore, its key that you ask questions: In our live sessions: Monday, 16:15-17:45. In the Moodle forum: Please, post all your questions to the Moodle forum. Every participant will be able to see your questions, submit replies, and view my responses in this manner. As a result, everyone will have access to the same information. To stay updated about current debates, I propose that you turn on alerts about new entries in the forum. Email: Send me an email at lara.kobilke@ifkw.lmu.de if you have any private questions that you dont want to address in front of the rest of the class. What can I do if I have problems with my R code? Besides asking a question during the seminar (see What should you do if you have an urgent question?), there are some great places to have a look at when you encounter problems. Ill cover them in the section [Help?!] in greater detail. To give you a head start, heres a quick rundown of the three best places to look if you have a problem with your code: Rs integrated help function: Use the ?-function whenever possible. Lets assume you struggle with creating a histogram for your data (hist function in R). You can open the R documentation of the hist function in R by writing: ?hist Preview of ?hist in R: Search engines: Like Bing or Google. Yup, programmers and data scientists google all the time! Nobody knows all the code and errors by heart. Often you can find perfect answers to your questions on Stackoverflow, StatsExchange, or Rseek because other people had exactly the same problems. And more importantly, the communities on these websites are very friendly and helpful. Packages reference manuals: Finally, problems with R packages (well get to packages later, see: [Packages]) can often be solved by looking at their reference manuals (an overview document containing all of a packages functions). For example, you can learn more about dplyr (a data management package that we are going to use later in this tutorial) by visiting its reference manual on a website called CRAN: https://cran.r-project.org/web/packages/dplyr/dplyr.pdf. That is all there is to it. Lets begin with our first tutorial: Tutorial: Installing &amp; Understanding R/R Studio "],["tutorial-installing-understanding-rr-studio.html", " 1 Tutorial: Installing &amp; Understanding R/R Studio 1.1 Installing R 1.2 Installing R Studio 1.3 Updating R and R Studio 1.4 How does R work? 1.5 Why should I use R? 1.6 How does R Studio work? 1.7 Take-Aways 1.8 More tutorials on this", " 1 Tutorial: Installing &amp; Understanding R/R Studio After working through Tutorial 1, youll know how to install R and R Studio know how to update R and R Studio understand the layout of R Studio 1.1 Installing R R is the programming language well use to import, edit, and analyze data. Please watch one of these two video tutorials before installing R yourself. Video Tutorial for Windows Video Tutorial for Mac When you are ready to install R, use Cran to install the newest version of R (4.1.2, Bird Hippie). Youll have to specify your operation system to download the right version: Installer for Windows Installer for Mac 1.2 Installing R Studio Next, install R Studio. R Studio is a desktop application with a graphical interface that facilitates programming with R. The newest version of R Studio (1.4.1717) can be downloaded via this Link. 1.3 Updating R and R Studio If you have already installed R and RStudio (for example, because you already needed it for a previous seminar), please update your version to the latest version. This way, well all know that our versions are compatible. 1.3.1 On Windows Updating on Windows is tricky. Therefore, you can use a package called installr, which helps you manage your update. First, install the installr package if you dont have it. Use the following code: # installing/loading the package: if(!require(installr)) { install.packages(&quot;installr&quot;); require(installr) } #load / install+load installr After you have installed or loaded the installr package, lets start the updating process of your R installation by using the updateR() function. It will check for newer versions, and if one is available, will guide you through the decisions youd need to make: # using the package: updateR() Finally, update R Studio. Updating RStudio is easy, just open RStudio and go to Help &gt; Check for Updates to install a newer version. 1.3.2 On MAC Go to CRAN and install the newer package installer. After that update R Studio. Updating RStudio is easy, just open RStudio and go to Help &gt; Check for Updates to install a newer version. 1.4 How does R work? R is an object- and function-oriented programming language. Chambers (2014, p. 4) explains object- and function-oriented like this: Everything that exists is an object. Everything that happens is a function call. IN R, you will assign values (for instance, single numbers/letters, several numbers/letters, or whole data files) to objects in R to work with them. For example, this command will assign the letters hello to an object caled word by using the assign operator &lt;- (a function used to assign values to objects): word &lt;- &quot;hello&quot; The type of each object will dictate what sorts of computations you may be done with this object. The object word, for example, is distinguished by the fact that it is made up of characters (i.e., it is a word) - which may make it impossible to compute the objects mean value, for example (which is possible only for objects consisting of numerical data). 1.5 Why should I use R? There are several reasons why Im an advocate of R (or similar programming languages such as Python) over programs such as SPSS. R is free. Other than most other (statistical) programs, you do not need to buy it (or rely on an university license, that is likely to run out once you leave your department). R is an open source program. Other than most other programs, the source code - i.e., the basis of the program - is freely available. So are the hundred of packages (well get to those later  these are basically additional functions you may need for more specific analyses) on CRAN that you can use to extend Rs base functions. R offers you flexibility. You can work with almost any type of data and rely on a large (!) set of functions to import, edit, or analyze such data. And if the function you need to do so hasnt been implemented (or simply does not exist yet), you can write it yourself! Learning R increases your chances on the job market. For many jobs (academia, market research, data science, data journalism), applicants should know at least one programming language. 1.6 How does R Studio work? As mentioned, R studio is a graphical interface which facilitates programming with R. It contains up to four main windows, which allow for different things: Writing your own code (Window 1: Source). Important: When first installing R/R Studio and opening R studio, you may not see this window right away. In this case, simply open it by clicking on File/New File/R Script. Executing your own code (Window 2: Console) Inspecting objects (Window 3: Environment) Visualizing data, searching for help, updating packages etc. (Window 4: Files/Plots/Packages etc.) Image: Four main windows in R Please note that the specific set-up of your R Studio may look different (the order of windows may vary and so may the windows names). I have made the experience that having these four windows open works best for me. This may be different for you. If you want to modify the appearance of your R Studio, simply choose Tools/Global Options/Pane Layout. Image: Changing the Layout 1.6.1 Source: Writing your own code Using the window Source, youll write your own code to execute whichever task you want R to fulfill. 1.6.1.1 Writing Code Lets start with an easy example: Assume you simply want R to print the word hello. In this case, you would first write a simple command that assigns the word hello to an object called word. The assigment of values to named objects is done via either the operator &lt;- or the operator =. The left side of that command contains the object that should be created; its right side the values that should be assigned to this object. In short, this command tells R to assign the world hello to an object called word. word &lt;- &quot;hello&quot; Image: Source 1.6.1.2 Annotating Code Another helpful aspect of R is that you can comment your own code. Oftentimes, this is very helpful for understanding your code later (if you write several hundred lines of codes, you may not remember their exact meaning months later). Comments or notes can be made via hashtags #. Anything following a hashtag will not be considered code by R but be ignored instead. word &lt;- &quot;hello&quot; #this line of code assigns the word &quot;hello&quot; to an object called word 1.6.1.3 Executing Code We now want to execute our code. Doing so is simple: Mark the parts of the code you want to run (for instance, single rows of code or blocks of code across several rows) Either press Run (see upper right side of the same window) or press Ctrl + Enter (On Mac OS X, hold the command key and press return instead). R should now execute exactly those lines of codes that you marked (hereby creating the object word). If you havent marked any specific code, all lines of code will be executed. Image: Executing Code 1.6.2 Console: Printing results Results of executing code are printed in a second window called Console, which includes the code you ran and the object you may have called when doing so. Previously, we defined an object called word, which consists of the single word hello. Thus, R prints our code as well as objects called when running this code (here, the object word) in the console. word &lt;- &quot;hello&quot; word ## [1] &quot;hello&quot; Image: Window Console 1.6.3 Environment: Overview of objects The third window is called Environment1. This windows displays all the objects currently existing - in our case, only the object word. As soon as you start creating more objects, this environment will fill up. If youre an SPSS user, this window is very similar to what is called the Datenansicht / Data overview in SPSS. However, the R version of this is much more flexible, given that our environment can contain several data sets, for example, at the same time. Image: Window Environment It is important to know that we can visually inspect any object using the View() command (with a new tab then opening in the Source window). This isnt super helpful right now - but if you work with bigger data sets with several observations/variables later on, it is often useful to inspect data visually. View(word) Image: Window View 1.6.4 Plots/Help/Packages: Do everything else Lastly, the standard R Studio interface contains a fourth window (if you opted for this layout). In my case, the window contains several sub-sections called Files, Plots, or Packages among others. Youll understand their specific functions later - the window can, for instance, be used to plot/visualize results or see which packages are currently loaded. Image: Window Files/Plots/Packages 1.7 Take-Aways Window Source: used to write/execute code in R Window Console: used to return results of executed code Window Environment: used to inspect objects on which to use functions Window Files/Plots/Packages etc.: used for additional functions, for instance visualizations/searching for help/activating or updating packages 1.8 More tutorials on this You still have questions? The following tutorials &amp; papers can help you with that: YaRrr! The Pirates Guide to R by N.D.Phillips, Tutorial 2 Computational Methods in der politischen Kommunikationsforschung by J. Unkel, Tutorial 1 SICSS Boot Camp by C. Bail, Video 1 wegweisR by M. Haim, Video 1 R Cookbook by Long et al., Tutorial 1 again, this only applies for the way I set up my R Studio. You can change this via Tools/Global Options/Pane Layout "],["solutions.html", "Solutions", " Solutions This is where youll find solutions for all of the exercises. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
